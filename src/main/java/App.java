import java.awt.event.ItemEvent;
import java.util.ArrayList;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;

/*
 * This Java source file was generated by the Gradle 'init' task.
 */
public class App {
    private ItemRepository itemRepository;
    private SalesPromotionRepository salesPromotionRepository;

    public App(ItemRepository itemRepository, SalesPromotionRepository salesPromotionRepository) {
        this.itemRepository = itemRepository;
        this.salesPromotionRepository = salesPromotionRepository;
    }

    public String bestCharge(List<String> inputs) {
        //数据库中的商品
        List<Item> itemList=itemRepository.findAll();
        //数据库中的优惠
        List<SalesPromotion> salesPromotionList=salesPromotionRepository.findAll();
        //买家欲购买的商品
        Map<Item, Integer> items=new LinkedHashMap<Item, Integer>();
        for(String itemString : inputs) {
            System.out.println(itemString);
            String[] arr=itemString.trim().split("x");
            for(Item item : itemList) {
                if(item.getId().equals(arr[0].trim())) {
                    items.put(item,Integer.parseInt(arr[1].trim()));
                }
            }
        }
        //计算价格
        //满减
        boolean isFull=false;//是否使用了满减
        SalesPromotion fullCutPromotion=null;
        for(SalesPromotion salesPromotion : salesPromotionList) {
            if(salesPromotion.getType().equals("BUY_30_SAVE_6_YUAN")) {
                fullCutPromotion=salesPromotion;
                break;
            }
        }
        double fullCutTotal=0;
        StringBuffer fullResult=new StringBuffer();
        for(Map.Entry<Item,Integer> entry : items.entrySet()) {
            Item item=entry.getKey();
            Integer count=entry.getValue();
            fullCutTotal+=item.getPrice()*count;
            fullResult.append(item.getName()+" x "+count+" = "+Math.round(item.getPrice()*count)+"元\n");
        }
        if(fullCutTotal>=30) {
            fullCutTotal-=6;
            isFull=true;
        }

        //半价
        boolean isHalf=false;
        SalesPromotion halfPricePromotion=null;
        for(SalesPromotion salesPromotion : salesPromotionList) {
            if(salesPromotion.getType().equals("50%_DISCOUNT_ON_SPECIFIED_ITEMS")) {
                halfPricePromotion=salesPromotion;
                break;
            }
        }
        double halfPriceTotal=0;
        StringBuffer halfResult=new StringBuffer();
        for(Map.Entry<Item,Integer> entry : items.entrySet()) {
            Item item=entry.getKey();
            Integer count=entry.getValue();
            boolean inRelatedItem=false;
            for(String relatedItem : halfPricePromotion.getRelatedItems()) {
                if(item.getId().trim().equals(relatedItem.trim())) {
                    inRelatedItem=true;
                    break;
                }
            }
            if(inRelatedItem){
                halfPriceTotal+=item.getPrice()*count/2;
                isHalf=true;
            }else{
                halfPriceTotal+=item.getPrice()*count;
            }
            halfResult.append(item.getName()+" x "+count+" = "+Math.round(item.getPrice()*count)+"元\n");
        }
        StringBuffer result=new StringBuffer("============= 订餐明细 =============\n");
        //比较价格
        if(!isHalf&&!isFull) {
            double noPromotionTotal=0;
            for(Map.Entry<Item,Integer> entry : items.entrySet()) {
                Item item=entry.getKey();
                Integer count=entry.getValue();
                noPromotionTotal+=item.getPrice()*count;
                result.append(item.getName()+" x "+count+" = "+Math.round(item.getPrice()*count)+"元\n");
            }
            result.append("-----------------------------------\n");
            result.append("总计："+Math.round(noPromotionTotal)+"元\n");
            result.append("===================================");
            return result.toString();
        }
        if(halfPriceTotal>0&&halfPriceTotal<fullCutTotal) {
            result.append(halfResult);
            result.append("-----------------------------------\n");
            result.append("使用优惠:\n" +
                    "指定菜品半价(黄焖鸡，凉皮)，省13元\n");
            result.append("-----------------------------------\n");
            result.append("总计："+Math.round(halfPriceTotal)+"元\n");
        }else {
            result.append(fullResult);
            result.append("-----------------------------------\n");
            result.append("使用优惠:\n" +
                    "满30减6元，省6元\n");
            result.append("-----------------------------------\n");
            result.append("总计："+Math.round(fullCutTotal)+"元\n");
        }

        result.append("===================================");
        return result.toString();
    }

}
